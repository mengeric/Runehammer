// Code generated by MockGen. DO NOT EDIT.
// Source: rule.go
//
// Generated by this command:
//
//	mockgen -source=rule.go -destination=rule_mock.go -package=rule
//

// Package rule is a generated GoMock package.
package rule

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRuleMapper is a mock of RuleMapper interface.
type MockRuleMapper struct {
	ctrl     *gomock.Controller
	recorder *MockRuleMapperMockRecorder
	isgomock struct{}
}

// MockRuleMapperMockRecorder is the mock recorder for MockRuleMapper.
type MockRuleMapperMockRecorder struct {
	mock *MockRuleMapper
}

// NewMockRuleMapper creates a new mock instance.
func NewMockRuleMapper(ctrl *gomock.Controller) *MockRuleMapper {
	mock := &MockRuleMapper{ctrl: ctrl}
	mock.recorder = &MockRuleMapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRuleMapper) EXPECT() *MockRuleMapperMockRecorder {
	return m.recorder
}

// FindByBizCode mocks base method.
func (m *MockRuleMapper) FindByBizCode(ctx context.Context, bizCode string) ([]*Rule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByBizCode", ctx, bizCode)
	ret0, _ := ret[0].([]*Rule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByBizCode indicates an expected call of FindByBizCode.
func (mr *MockRuleMapperMockRecorder) FindByBizCode(ctx, bizCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByBizCode", reflect.TypeOf((*MockRuleMapper)(nil).FindByBizCode), ctx, bizCode)
}
