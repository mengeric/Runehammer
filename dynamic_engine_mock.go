// Code generated by MockGen. DO NOT EDIT.
// Source: dynamic_engine.go
//
// Generated by this command:
//
//	mockgen -source=dynamic_engine.go -destination=dynamic_engine_mock.go -package=runehammer
//

// Package runehammer is a generated GoMock package.
package runehammer

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRuleValidator is a mock of RuleValidator interface.
type MockRuleValidator struct {
	ctrl     *gomock.Controller
	recorder *MockRuleValidatorMockRecorder
	isgomock struct{}
}

// MockRuleValidatorMockRecorder is the mock recorder for MockRuleValidator.
type MockRuleValidatorMockRecorder struct {
	mock *MockRuleValidator
}

// NewMockRuleValidator creates a new mock instance.
func NewMockRuleValidator(ctrl *gomock.Controller) *MockRuleValidator {
	mock := &MockRuleValidator{ctrl: ctrl}
	mock.recorder = &MockRuleValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRuleValidator) EXPECT() *MockRuleValidatorMockRecorder {
	return m.recorder
}

// Validate mocks base method.
func (m *MockRuleValidator) Validate(definition any) []ValidationError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", definition)
	ret0, _ := ret[0].([]ValidationError)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockRuleValidatorMockRecorder) Validate(definition any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockRuleValidator)(nil).Validate), definition)
}
